# Service account for permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opencost
  namespace: {{ .Values.namespace }}
---

# Cluster role giving opencost to get, list, watch required recources
# No write permissions are required
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opencost
rules:
  - apiGroups:
      - ''
    resources:
      - configmaps
      - deployments
      - nodes
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - namespaces
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - deployments
      - daemonsets
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - get
      - list
      - watch

---

# Bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opencost
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opencost
subjects:
  - kind: ServiceAccount
    name: opencost
    namespace: {{ .Values.namespace }}
---

# Create a deployment for a single cost model pod
#
# See environment variables if you would like to add a Prometheus for
# cost model to read from for full functionality.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opencost
  namespace: {{ .Values.namespace }}
  labels:
    app: opencost
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: opencost
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: opencost
    spec:
      restartPolicy: Always
      serviceAccountName: opencost
      containers:
        - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          name: opencost
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: PROMETHEUS_SERVER_ENDPOINT
              value: {{ .Values.prometheusServerEndpoint }} # The endpoint should have the form http://<service-name>.<namespace-name>.svc "http://my-prometheus-server.prometheus.svc"
            - name: CLOUD_PROVIDER_API_KEY
              value: {{ .Values.cloudProviderAPIKey }}
            - name: CLUSTER_ID
              value: {{ .Values.clusterId }} # Default cluster ID to use if cluster_id is not set in Prometheus metrics.
          imagePullPolicy: {{ .Values.image.pullPolicy }}
---

# Expose the cost model with a service
#
# Without a Prometheus endpoint configured in the deployment,
# only opencost/metrics will have useful data as it is intended
# to be used as just an exporter.
kind: Service
apiVersion: v1
metadata:
  name: opencost
  namespace: opencost
spec:
  selector:
    app: opencost
  type: {{ .Values.service.type }}
  ports:
    - name: opencost
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}

{{- if .Values.ingress.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opencost
  namespace: {{ .Values.namespace }}
spec:
  rules:
  - host: {{ .Values.ingress.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: opencost
            port:
              number: {{ .Values.service.port }}
{{- end }}